.. _downloading:

===========================
 Downloading mrweather app
===========================

Downloading the code and scripts
--------------------------------

Access to the code requires git. You will need access to the command line clients, ``git``
(v1.8 or greater). You can download the latest version of the release
code:

.. code-block:: console

    git clone -b release-ufs.1.0 https://github.com/ufs-community/ufs-mrweather-app.git my_ufs_sandbox
    cd my_ufs_sandbox

To checkout a previous version of UFS, first view the available versions:

.. code-block:: console

    git tag --list 'release-ufs*'

To checkout a specific UFS release tag type, for example UFS.0.1:

.. code-block:: console

    git checkout release-ufs.0.1

Finally, to checkout all the individual model components, run the **checkout_externals** script from /path/to/my_ufs_sandbox.

.. code-block:: console

    ./manage_externals/checkout_externals

The **checkout_externals** script will read the configuration file called ``Externals.cfg`` and
will download all the external component models and CIME into /path/to/my_ufs_sandbox.

To see more details regarding the checkout_externals script from the command line, type:

.. code-block:: console

    ./manage_externals/checkout_externals --help

To confirm a successful download of all components, you can run ``checkout_externals``
with the status flag to show the status of the externals:

.. code-block:: console

    ./manage_externals/checkout_externals -S

This should show a clean status for all externals, with no characters in the first two
columns of output, as in this example:

.. code-block:: console

    todo: FILL THIS IN

You should now have a complete copy of the UFS source code in your /path/to/my_ufs_sandbox.

If there were problems obtaining an external, you might instead see something like:

.. code-block:: console

   e-  ./components/cam

This might happen if there was an unexpected interruption while downloading.
First try rerunning ``./manage_externals/checkout_externals``.
If there is still a problem, try running with logging turned on using:

.. code-block:: console

   ./manage_externals/checkout_externals --logging

Check the ``manage_externals.log`` file to see what errors are reported.

Downloading input data
----------------------

Input datasets are needed to run the model. UFS input data are
available through a separate Subversion input data repository.

Datasets can be downloaded on a case by case basis as needed and UFS
provides tools to check and download input data automatically.

A local input data directory should exist on the local disk, and it also
needs to be set in the UFS scripts via the variable ``$DIN_LOC_ROOT.``
For supported machines, this variable is preset. For generic machines,
this variable is set via the ``--input-dir`` argument to **create_newcase**.
It is recommended that all users of a given filesystem share the same ``$DIN_LOC_ROOT`` directory.

The files in the subdirectories of ``$DIN_LOC_ROOT`` should be
write-protected. This prevents these files from being accidentally
modified or deleted. The directories in ``$DIN_LOC_ROOT`` should generally
be group writable, so the directory can be shared among multiple users.

As part of the process of generating the UFS executable, the utility,
**check_input_data** located in each case directory
is called, and it attempts to locate all required input data for the
case based upon file lists generated by components. If the required
data is not found on local disk in ``$DIN_LOC_ROOT``, then the data
will be downloaded automatically by the scripts or it can be
downloaded by the user by invoking **check_input_data** with the ``--download``
command argument. If you want to download the input data manually you
should do it before you build UFS.
